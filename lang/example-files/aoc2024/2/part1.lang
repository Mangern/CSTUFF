// copy-paste from prev. day
token_size: int;
line_size: int;
n: int;
arr: int[100];
buf: char[100];
token: char[100];
EOF: char;

readline_buf: () -> bool = {
    line_size = 0;
    c: char;

    while (true) {
        c = readchar();

        if (c == EOF) {
            return true;
        }

        buf[line_size] = c;
        line_size += 1;

        if (c == '\n') {
            break;
        }
    }
    return false;
}


tokentoll : () -> int = {
    i := 0;
    ret := 0;

    while (i < token_size) {
        ret *= 10;

        dig := cast(int, token[i] - '0');
        ret += dig;
        i += 1;
    }

    return ret;
}

tokenize_buf: () -> void = {
    token_size = 0;
    i := 0;
    n = 0;

    while (i < line_size) {
        if (buf[i] == EOF) { break; }
        if (buf[i] == '\n') { break; }

        j := i;

        while (true) {
            token[j-i] = buf[j];

            if (buf[j] == ' ') { break; }
            if (buf[j] == '\n') { break; }
            if (buf[j] == EOF) { break; }

            j += 1;
        }

        token_size = j - i;
        arr[n] = tokentoll();

        i = j;

        while (buf[i] == ' ') {
            i += 1;
        }
        n += 1;
    }
}

main: () -> void = {
    EOF = cast(char, 255);
    ans := 0;

    while (true) {
        if (readline_buf()) {
            break;
        }

        if (line_size == 0) {
            break;
        }

        tokenize_buf();

        all_inc := 1;
        all_dec := 1;

        i := 1;
        while (i < n) {
            if (arr[i] >= arr[i-1]) {
                all_dec = 0;

                if (arr[i] - arr[i-1] > 3) {
                    all_inc = 0;
                }
            }

            if (arr[i] <= arr[i-1]) {
                all_inc = 0;

                if (arr[i-1] - arr[i] > 3) {
                    all_dec = 0;
                }
            }
            i += 1;
        }

        if (all_inc + all_dec == 1) {
            ans += 1;
        }
    }
    println(ans);
}
